# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- main

pool:
  vmImage: ubuntu-latest

variables:
- name: azureLocation
  value: eastus
- name: azureResourceGroup
  value: cicd-automated-testing-rg
- name: azureApplicationType
  value: cicd-app
- name: azureVirtualNetworkName
  value: cicd-network
- name: azureAddressPrefixTest
  value: 10.0.0.0/24
- name: azureAddressSpace
  value: 10.0.0.0/24
- name: tf-resource-group-name
  value: tstate
- name: tf-storage-account-name
  value: tstate13515
- name: tf-container-name
  value: tstate
- name: tf-blob-key-name
  value: test.cicd.terraform.tfstate
- name: subscriptionConnection
  value: arm-resource-group
- name: terraformDirectory
  value: terraform

stages:
- stage: Build
  jobs:
  - job: Build
    steps:
    - task: InstallSSHKey@0
      displayName: 'Install an SSH key'
      inputs:
        knownHostsEntry: 'SHA256:1Hyr55tsxGifESBMc0s+2NtutnR/4+LOkVwrOGrIp8U johndoe@contoso'
        sshPublicKey: '$(ssh-public-key)'
        sshKeySecureFile: 'id_rsa'

    - task: ArchiveFiles@2
      displayName: 'Archive FakeRestAPI'
      inputs:
        rootFolderOrFile: 'automatedtesting/jmeter/fakerestapi'
        includeRootFolder: false
        archiveType: 'zip'
        archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId)-fakerestapi.zip'
    - publish: $(Build.ArtifactStagingDirectory)/$(Build.BuildId)-fakerestapi.zip
      displayName: 'Upload Package REST API'
      artifact: drop-fakerestapi

    - task: AzureCLI@1
      displayName: Terraform credentials
      inputs:
        azureSubscription: '$(subscriptionConnection)'
        scriptLocation: inlineScript
        inlineScript: |
          set -eu  # fail on error
          subscriptionId=$(az account show --query id -o tsv)
          echo "##vso[task.setvariable variable=ARM_CLIENT_ID]$servicePrincipalId"
          echo "##vso[task.setvariable variable=ARM_CLIENT_SECRET;issecret=true]$servicePrincipalKey"
          echo "##vso[task.setvariable variable=ARM_SUBSCRIPTION_ID]$subscriptionId"
          echo "##vso[task.setvariable variable=ARM_TENANT_ID]$tenantId"
          echo "Determining Terraform remote backend information"
          echo "##vso[task.setvariable variable=ACCOUNT_KEY]$(az storage account keys list --resource-group $tf-resource-group-name --account-name $tf-storage-account-name --query '[0].value' -o tsv)"
        addSpnToEnvironment: true

    - task: AzureCLI@2
      displayName: 'Terraform init'
      inputs:
        azureSubscription: '$(subscriptionConnection)'
        scriptType: pscore
        scriptLocation: inlineScript
        inlineScript: |
          # Run Terraform
          terraform version
          terraform init `
                        -backend-config="resource_group_name=$(tf-resource-group-name)" `
                        -backend-config="storage_account_name=$(tf-storage-account-name)" `
                        -backend-config="container_name=$(tf-container-name)" `
                        -backend-config="key=$(tf-blob-key-name)" `
                        -backend-config="access_key=$(ACCOUNT_KEY)" `
                        -backend-config="subscription_id=$(ARM_SUBSCRIPTION_ID)" `
                        -backend-config="tenant_id=$(ARM_TENANT_ID)" `
                        -backend-config="client_id=$(ARM_CLIENT_ID)" `
                        -backend-config="client_secret=$(ARM_CLIENT_SECRET)"
        addSpnToEnvironment: true
        useGlobalConfig: true
        failOnStandardError: true
        powerShellIgnoreLASTEXITCODE: false
        workingDirectory: '$(terraformDirectory)'

    - bash: |
        set -eu  # fail on error
        # validate Terraform code
        terraform validate
      displayName: Terraform validate
      workingDirectory: '$(terraformDirectory)'

    - bash: |
        set -eu  # fail on error
        terraform plan -out=solution.plan -input=false \
          -var="subscription_id=$(ARM_SUBSCRIPTION_ID)" \
          -var="client_id=$(ARM_CLIENT_ID)" \
          -var="client_secret=$(ARM_CLIENT_SECRET)" \
          -var="tenant_id=$(ARM_TENANT_ID)" \
          -var="location=$(azureLocation)" \
          -var="resource_group=$(azureResourceGroup)" \
          -var="application_type=$(azureApplicationType)" \
          -var="virtual_network_name=$(azureVirtualNetworkName)" \
          -var="address_prefix_test=$(azureAddressPrefixTest)" \
          -var="address_space=$(azureAddressSpace)"
        #terraform apply -input=false -auto-approve solution.plan
      displayName: Terraform plan
      workingDirectory: '$(terraformDirectory)'

    - bash: |
        set -eu  # fail on error
        terraform apply -input=false -auto-approve solution.plan
      displayName: Terraform apply
      workingDirectory: '$(terraformDirectory)'

    - bash: |
        set -eu  # fail on error
        # show all Terraform outputs
        terraform output
        # list all resources in Terraform state
        terraform state list
        # show current Terraform resources
        terraform show
      displayName: Terraform show
      workingDirectory: '$(terraformDirectory)'

    - task: CmdLine@2
      displayName: Install Newman
      inputs:
        script: 'sudo npm install -g newman'
        workingDirectory: $(System.DefaultWorkingDirectory)
    - task: CmdLine@2
      displayName: Run Regression Tests with Newman
      continueOnError: true
      inputs:
        script: 'newman run "API Regression Test Suite.postman_collection.json" --env-var newSalary="456" --environment DummyRestApiEnvironment.postman_environment.json'
        workingDirectory: 'automatedtesting/postman'
    - task: CmdLine@2
      displayName: Run Data Validation Tests with Newman
      continueOnError: true
      inputs:
        script: 'newman run "API Data Validation Test Suite.postman_collection.json" --environment DummyRestApiEnvironment.postman_environment.json --iteration-data Dummy-REST-API-Data.csv'
        workingDirectory: 'automatedtesting/postman'

    #- bash: |
    #    set -eu  # fail on error
    #    terraform destroy -input=false -auto-approve \
    #      -var="subscription_id=$(ARM_SUBSCRIPTION_ID)" \
    #      -var="client_id=$(ARM_CLIENT_ID)" \
    #      -var="client_secret=$(ARM_CLIENT_SECRET)" \
    #      -var="tenant_id=$(ARM_TENANT_ID)" \
    #      -var="location=$(azureLocation)" \
    #      -var="resource_group=$(azureResourceGroup)" \
    #      -var="application_type=$(azureApplicationType)" \
    #      -var="virtual_network_name=$(azureVirtualNetworkName)" \
    #      -var="address_prefix_test=$(azureAddressPrefixTest)" \
    #      -var="address_space=$(azureAddressSpace)"
    #  displayName: Terraform destroy
    #  workingDirectory: '$(terraformDirectory)'

- stage: Deployment
  jobs:
  - deployment: FakeRestAPI
    pool:
      vmImage: 'Ubuntu-18.04'
    environment: 'TEST'
    strategy:
      runOnce:
        deploy:
          steps:
          - task: AzureWebApp@1
            displayName: 'Deploy Azure Web App'
            inputs:
              azureSubscription: 'arm-resource-group'
              appName: 'cicd-app-AppService'
              appType: webApp
              package: $(Pipeline.Workspace)/drop-fakerestapi/$(Build.BuildId)-fakerestapi.zip
  - deployment: VMDeploy
    displayName: Deploy Selenium to Ubuntu VM
    environment:
      name: TEST
      resourceType: VirtualMachine
      tags: ubuntu
    strategy:
      runOnce:
        deploy:
          steps:
          - task: Bash@3
            inputs:
              targetType: 'inline'
              script: |
                #! /bin/bash
                touch VMDeploy.txt
                sudo apt-get upgrade -y
                sudo apt-get install python3-distutils -y
                sudo apt-get install python3-apt -y

                # install python pip
                # sudo apt-get install python3-pip -y
                curl https://bootstrap.pypa.io/get-pip.py -o get-pip.py || wget https://bootstrap.pypa.io/get-pip.py
                python3 get-pip.py
                export PATH=$PATH:/home/azureuser/.local/bin
                pip3 --version
                python3 -m pip install -U pip
                
                
                sudo apt-get install unzip -y
                sudo snap install chromium
                pip3 install selenium
                export PATH=$PATH:some/path