{
	"info": {
		"_postman_id": "11eda9ef-7ce6-4dc2-a7d9-56fc0fdcb7b2",
		"name": "API Data Validation Test Suite",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "V1 Create Employee Data",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Define response codes that indacte successful requests.",
							"// Note: 429 is returned by dummy.restapiexample.com when it considers the number of",
							"// received requests as being too high.",
							"pm.test(\"V1 Create Single Employee: Successful request\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202, 429]);",
							"});",
							"",
							"pm.test(\"V1 Create Single Employee: Successful response status\", function () {",
							"    pm.response.code == 429 ? // Check for response 429 (Too many requests)",
							"    pm.expect(true).to.equal(true) :",
							"    pm.expect(pm.response.text()).to.include(\"success\");",
							"});",
							"",
							"pm.test(\"V1 Create Single Employee: Successful response message\", function () {",
							"    pm.response.code == 429 ? // Check for response 429 (Too many requests)",
							"    pm.expect(true).to.equal(true) :",
							"    pm.expect(pm.response.text()).to.include(\"Successfully! Record has been added.\");",
							"});",
							"",
							"// Remember ID assigned to new employee",
							"if (pm.response.code != 429) {",
							"    var json = pm.response.json();",
							"    pm.environment.set(\"newId\", json.data.id);",
							"}"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"name\": \"{{name}}\",\n    \"salary\": \"{{salary}}\",\n    \"age\": \"{{age}}\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://dummy.restapiexample.com/api/v1/create",
					"protocol": "http",
					"host": [
						"dummy",
						"restapiexample",
						"com"
					],
					"path": [
						"api",
						"v1",
						"create"
					]
				}
			},
			"response": []
		},
		{
			"name": "V2 Validate Employee Data",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Validates that employee data returned by the Dummy REST API is really",
							"// the data that was sent beforehand to the Dummy REST API.",
							"",
							"pm.test(\"V2 Validate Employee Data: Successful request\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202, 429]);",
							"});",
							"",
							"var json;",
							"// Check for response 429 (Too many requests)",
							"if (pm.response.code != 429) {",
							"    json = pm.response.json();",
							"}",
							"",
							"pm.test(\"V2 Validate Employee Data: Validate name\", function () {",
							"    pm.response.code == 429 ? // Check for response 429 (Too many requests)",
							"    pm.expect(true).to.equal(true) :",
							"    pm.expect(json.data.employee_name).to.eql(pm.iterationData.get(\"name\"));",
							"});",
							"",
							"pm.test(\"V2 Validate Employee Data: Validate salary\", function () {",
							"    pm.response.code == 429 ? // Check for response 429 (Too many requests)",
							"    pm.expect(true).to.equal(true) :",
							"    pm.expect(json.data.employee_salary).to.eql(pm.iterationData.get(\"salary\"));",
							"});",
							"",
							"pm.test(\"V2 Validate Employee Data: Validate age\", function () {",
							"    pm.response.code == 429 ? // Check for response 429 (Too many requests)",
							"    pm.expect(true).to.equal(true) :",
							"    pm.expect(json.data.employee_age).to.eql(pm.iterationData.get(\"age\"));",
							"});",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// Change new ID to existing ID as fake REST API does not really store new employees\r",
							"pm.environment.set(\"newId\", pm.iterationData.get(\"id\"));"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://dummy.restapiexample.com/api/v1/employee/{{newId}}",
					"protocol": "http",
					"host": [
						"dummy",
						"restapiexample",
						"com"
					],
					"path": [
						"api",
						"v1",
						"employee",
						"{{newId}}"
					]
				}
			},
			"response": []
		}
	]
}